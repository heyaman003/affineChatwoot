version: "3.8"

services:
  affine:
    image: custom-affine-web:latest   # Use custom image
    container_name: affine_server
    ports:
      - '${PORT:-3010}:3010'
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      affine_migration:
        condition: service_completed_successfully
    volumes:
      # custom configurations
     - ./data/storage:/root/.affine/storage
      - ${CONFIG_LOCATION}:/root/.affine/config
    env_file:
      - .env
    environment:
      - AFFINE_CONFIG_PATH=/root/.affine/config
      - REDIS_SERVER_HOST=redis
      - DATABASE_URL=postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE:-affine}
      - AFFINE_INDEXER_ENABLED=false
    restart: unless-stopped

  affine_migration:
    image: ghcr.io/toeverything/affine-graphql:${AFFINE_REVISION:-stable}
    container_name: affine_migration_job
    volumes:
      # custom configurations
      - ${UPLOAD_LOCATION}:/root/.affine/storage
      - ${CONFIG_LOCATION}:/root/.affine/config
    command: ['sh', '-c', 'node ./scripts/self-host-predeploy.js']
    env_file:
      - .env
    environment:
      - REDIS_SERVER_HOST=redis
      - DATABASE_URL=postgresql://${DB_USERNAME}:${DB_PASSWORD}@postgres:5432/${DB_DATABASE:-affine}
      - AFFINE_INDEXER_ENABLED=false
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis
    container_name: affine_redis
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres:
    image: pgvector/pgvector:pg16
    container_name: affine_postgres
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_DATABASE:-affine}
      POSTGRES_INITDB_ARGS: '--data-checksums'
      POSTGRES_HOST_AUTH_METHOD: trust
    healthcheck:
      test:
        ['CMD', 'pg_isready', '-U', "${DB_USERNAME}", '-d', "${DB_DATABASE:-affine}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  tenant-config:
    build: ./tenant-config
    container_name: tenant-config
    volumes:
      - ./tenant-config/data:/usr/src/app/data
    ports:
      - "4000:4000"
    restart: unless-stopped
  

  chatwoot_rails:
    image: chatwoot/chatwoot:latest
    env_file: chatwoot/.env  
    depends_on:
      - chatwoot_postgres
      - chatwoot_redis
    ports:
      - '127.0.0.1:3000:3000'
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      - DISABLE_X_FRAME_HEADER=true  
    entrypoint: docker/entrypoints/rails.sh
    command: ['bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0']
    volumes:
      - chatwoot_storage:/app/storage
    restart: always

  chatwoot_sidekiq:
    image: chatwoot/chatwoot:latest
    env_file: chatwoot/.env
    depends_on:
      - chatwoot_postgres
      - chatwoot_redis
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
    command: ['bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml']
    volumes:
      - chatwoot_storage:/app/storage
    restart: unless-stopped

  chatwoot_postgres:
    image: pgvector/pgvector:pg16
    restart: unless-stopped
    ports:
      - '127.0.0.1:5433:5432'  
    volumes:
      - chatwoot_postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=chatwoot_production
      - POSTGRES_USER=chatwoot
      - POSTGRES_PASSWORD=password
      - POSTGRES_HOST_AUTH_METHOD=trust

  chatwoot_redis:
    image: redis:alpine
    restart: unless-stopped
    command: redis-server --requirepass Aman1234
    volumes:
      - chatwoot_redis_data:/data
    ports:
      - '127.0.0.1:6380:6379'  
    healthcheck:
        test: ["CMD", "redis-cli", "-a", "Aman1234", "ping"]
        interval: 10s
        timeout: 5s
        retries: 5

volumes:
  storage_data:
  postgres_data:
  redis_data:
  chatwoot_storage:
  chatwoot_postgres_data:
  chatwoot_redis_data: